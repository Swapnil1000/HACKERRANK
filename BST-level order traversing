#binary search tree- level order traversing in python
import sys

class Node:
    def __init__(self,data):
        self.right=self.left=None
        self.data = data
class Solution:
    def insert(self,root,data):
        if root==None:
            return Node(data)
        else:
            if data<=root.data:
                cur=self.insert(root.left,data)
                root.left=cur
            else:
                cur=self.insert(root.right,data)
                root.right=cur
        return root

    def levelOrder(self,root):
        x = [root]
        y = []
        
        while len(x)>0:
            node = x.pop()
            y.append(node.data)
            if node.left:
                x.insert(0,node.left)
            if node.right:
                x.insert(0,node.right)
        print(*y)
T=int(input())
myTree=Solution()
root=None
for i in range(T):
    data=int(input())
    root=myTree.insert(root,data)
myTree.levelOrder(root)
